AWSTemplateFormatVersion: "2010-09-09"
Description: "Operations: alert topic for email and discord"
Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: "Alert Parameters"
        Parameters:
          - Email
Parameters:
  Email:
    Description: "Email address that will receive alerts."
    Type: String
Resources:
  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "DiscordNotificationsLambdaRole"
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: LambdaFunctionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - "Fn::Join":
                      - ":"
                      - - "arn:aws:logs"
                        - Ref: "AWS::Region"
                        - Ref: "AWS::AccountId"
                        - "log-group:/aws/lambda/*:*:*"
              - Action:
                  - secretsmanager:ListSecrets
                  - secretsmanager:GetSecretValue
                Effect: Allow
                Resource:
                  - "Fn::Join":
                      - ":"
                      - - "arn:aws:secretsmanager"
                        - Ref: "AWS::Region"
                        - Ref: "AWS::AccountId"
                        - "secret:dev-ops/prod/discord-TZAxOZ"
  DiscordLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !ImportValue "mailejoe-buckets-CodeAssetsBucketName"
        S3Key: "dev-ops/discord.zip"
      Description: "Posts notifications to Discord."
      FunctionName: "DiscordLambda"
      Handler: discord.handler
      MemorySize: 128
      PackageType: Zip
      Role: !Ref "LambdaRole"
      Runtime: nodejs14.x
      Tags:
        - Key: application
          Value: mailejoe
        - Key: environment
          Value: production
        - Key: billing
          Value: mailejoe
      Timeout: 900
  DiscordLambdaAlias:
    Type: AWS::Lambda::Alias
    Properties:
      FunctionName: !Ref DiscordLambda
      FunctionVersion: "$LATEST"
      Name: discord
  AlertsTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        - Endpoint: !Ref DiscordLambdaAlias
          Protocol: lambda
      Tags:
        - Key: application
          Value: mailejoe
        - Key: environment
          Value: production
        - Key: billing
          Value: mailejoe
      TopicName: "mailejoe-alerts"
  AlertsFallbackTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        - Endpoint: !Ref Email
          Protocol: email
      Tags:
        - Key: application
          Value: mailejoe
        - Key: environment
          Value: production
        - Key: billing
          Value: mailejoe
      TopicName: "mailejoe-alerts-fallback"
  TopicPolicy:
    Type: "AWS::SNS::TopicPolicy"
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "sns:Publish"
            Effect: Allow
            Principal:
              Service:
                - "events.amazonaws.com"
                - "budgets.amazonaws.com"
                - "rds.amazonaws.com"
                - "s3.amazonaws.com"
                - "backup.amazonaws.com"
            Resource: !Ref AlertsTopic
            Sid: "AllowOperationEndpoints"
          - Action: "sns:Publish"
            Condition:
              StringEquals:
                "AWS:SourceOwner": !Ref "AWS::AccountId"
            Effect: Allow
            Principal:
              AWS: "*"
            Resource: !Ref AlertsTopic
            Sid: "AllowsSNSPublish"
          - Action: "sns:Publish"
            Condition:
              StringEquals:
                "AWS:Referer": !Ref "AWS::AccountId"
            Effect: Allow
            Principal:
              Service: "ses.amazonaws.com"
            Resource: !Ref AlertsTopic
            Sid: "AllowsSESNotifications"
      Topics:
        - !Ref AlertsTopic
  NumberOfNotificationsFailedTooHighAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmDescription: "Alerts could not be delivered"
      Namespace: "AWS/SNS"
      MetricName: NumberOfNotificationsFailed
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
        - !Ref AlertsFallbackTopic
      Dimensions:
        - Name: AlertsTopic
          Value: !GetAtt AlertsTopic.TopicName
      TreatMissingData: notBreaching
  LambdaInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"
      SourceArn: !Ref AlertsTopic
      FunctionName: !Ref DiscordLambdaAlias
Outputs:
  TemplateID:
    Description: "ID of the operations/alert template"
    Value: "operations/alerts"
  StackName:
    Description: "Stack Name"
    Value: !Sub "${AWS::StackName}"
  AlertsTopicARN:
    Description: "The ARN of the alerts topic"
    Value: !Ref AlertsTopic
    Export:
      Name: !Sub "${AWS::StackName}-AlertsTopicARN"
